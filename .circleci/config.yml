docs_deploy: &docs
  docker:
    - image: node:8.10.0
  steps:
    - checkout
    - attach_workspace:
        at: docs/_build
    - run:
        name: Disable jekyll builds
        command: touch docs/_build/html/.nojekyll
    - run:
        name: Install and configure dependencies
        command: |
          npm install -g --silent gh-pages@2.0.1
          git config user.email "tigrlabcamh@gmail.com"
          git config user.name "ci-build"
    - add_ssh_keys:
        fingerprints:
          - "f8:e7:ce:ec:9b:82:92:8d:af:81:9e:d2:de:59:f6:e6"
    - run:
        name: Deploy docs to gh-pages branch
        command: gh-pages --dotfiles --message "doc(update) [skip ci]" --dist docs/_build/html

version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

jobs:

  build:
    working_directory: /tmp/src/datman
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Check if docs build before continuing
          command: |
            if [[ "$( git log --format='format:%s' -n 1 $CIRCLE_SHA1 | grep -iE '^docs?(\(\w+\))?:' )" != "" ]]; then
              echo "Will only be building Docs"
              circleci step halt
            fi
      - restore_cache:
          keys:
            - datman-v1-{{ .Branch }}-{{ checksum "setup.cfg" }}
            - datman-v1-{{ .Branch }}
            - datman-v1-master-
            - datman-v1-
      - run:
          name: Set up installation and cache
          command: |
            pyenv global 3.6.5
            pip install -e .[all]
      - save_cache:
          key: datman-v1-{{ .Branch }}-{{ checksum "setup.cfg" }}
          paths:
            - /tmp/python
      - persist_to_workspace:
          root: /tmp
          paths:
            - src/datman
      - run:
          name: Run pytest and output junit xml for codecov
          command: |
            pyenv global 3.6.5
            pytest tests/ --junitxml=tests/results/junit-{envname}.xml --cov . \
              --cov-report term-missing --cov-report xml
      - codecov/upload:
          file: tests/results/junit*xml
          flags: unittests

  test_deploy_pypi:
    working_directory: /tmp/src/datman
    docker:
      - image: "python:3.6.5"
    steps:
      - checkout
      - run:
          name: Set up virtual environment
          command: |
            python -m venv /tmp/sdist
            source /tmp/sdist/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=30.3.0" twine

            # NOTE THE YAML/WRAPT requirement for __init__
            wrapt_ver=$(grep "wrapt" setup.cfg | tr -d ' ')
            pyyaml_ver=$(grep "pyyaml" setup.cfg | tr -d ' ')
            pip install "$wrapt_ver" "$pyyaml_ver"
      - run:
          name: Build datman
          command: |
            source /tmp/sdist/bin/activate

            # Get version, remove dirty suffix
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            echo "${CIRCLE_TAG:-%THISVERSION}" > VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - store_artifacts:
          path: /tmp/src/datman/dist
      - run:
          name: Check sdist
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/datman*tar.gz
            pip install dist/datman*tar.gz
            INSTALLED_VER=$(python -c 'import datman; print(datman.__version__)')
            echo "CIRCLETAG: $CIRCLEC_TAG"
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VER\""
            test "$INSTALLED_VER" = "$THISVERSION"
      - run:
          name: Check wheel
          command: |
            python -m venv /tmp/whl
            source /tmp/whl/bin/activate
            python -m pip install -U pip
            python -m pip install "setuptools>=30.3.0" twine

            wrapt_ver=$(grep "wrapt" setup.cfg | tr -d ' ')
            pyyaml_ver=$(grep "pyyaml" setup.cfg | tr -d ' ')
            pip install "$wrapt_ver" "$pyyaml_ver"

            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            twine check dist/datman*.whl
            pip install dist/datman*.whl
            INSTALLED_VER=$(python -c 'import datman; print(datman.__version__)')
            echo "VERSION: \"$THISVERSION\""
            echo "INSTALLED: \"$INSTALLED_VER\""
            test "$INSTALLED_VER" = "$THISVERSION"
      - store_artifacts:
          path: /tmp/src/datman/dist

  deployable:
    working_directory: /tmp/src/datman
    docker:
      - image: "python:3.6.5"
    steps:
      - run:
          command: |
            echo "Deploying Datman!"

  deploy_pypi:
    working_directory: /tmp/src/datman
    docker:
      - image: "python:3.6.5"
    steps:
      - checkout
      - run:
          name: Configure virtual environment
          command: |
            python -m venv /tmp/sdist
            source /tmp/sdist/bin/activate
            pip install -U pip
            pip install "setuptools>=30.3.0 twine"

            wrapt_ver=$(grep "wrapt" setup.cfg | tr -d ' ')
            pyyaml_ver=$(grep "pyyaml" setup.cfg | tr -d ' ')
            pip install "$wrapt_ver" "$pyyaml_ver"
      - run:
          name: Build datman
          command: |
            source /tmp/sdist/bin/activate
            THISVERSION=$( python get_version.py )
            THISVERSION=${THISVERSION%.dirty*}
            THISVERSION=${CIRCLE_TAG:-$THISVERSION}
            echo "${CIRCLE_TAG:-%THISVERSION}" > VERSION
            python setup.py sdist
            pip wheel --no-deps -w dist/ .
      - run:
          name: Upload to PyPI
          command: |
            source /tmp/sdist/bin/activate
            twine upload dist/datman*

  build_docs:
    working_directory: /tmp/src/datman
    docker:
      - image: "python:3.6.5"
    steps:
      - restore_cache:
          keys:
            - datman-v1-{{ .Branch }}-{{ checksum "setup.cfg" }}
            - datman-v1-{{ .Branch }}
            - datman-v1-master
            - datman-v1-
          paths:
            - ./docs/_build/_html
      - checkout
      - run:
          name: Install deps
          command: pip install --no-cache-dir -r docs/requirements.txt
      - run:
          name: Build only this commit
          command: make -C docs SPHINXOPTS="-W" BUILDDIR="_build/no_version_html" html
      - store_artifacts:
          path: ./docs/_build/no_version_html
      - run:
          name: Generate Versioned Docs
          command: |
            set +e
            force_versioned="$( git log --format=oneline -n 1 $CIRCLE_SHA1 | grep -i -E '\[docs?[ _]?versions?\]' )"
            set -e
            if [[ "x${CIRCLE_TAG}" = "x" && "${CIRCLE_BRANCH}" != "master" && "x${force_versioned}" = "x" ]]; then
              echo "Not a tag or master branch - skipping versioned docs."
              circleci step halt
            else
              make -f ./docs/Makefile versioned CURBRANCH=${CIRCLE_TAG:-$CIRCLE_BRANCH}
            fi
      - save_cache:
          key: docs-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - ./docs/_build/_html
      - persist_to_workspace:
          root: docs/_build
          paths: html
      - store_artifacts:
          path: ./docs/_build/html

  deploy_docs_tag:
    <<: *docs

  deploy_docs_master:
    <<: *docs

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - test_deploy_pypi:
          filters:
            branches:
              ignore:
                - /docs?\/.*/
            tags:
              only: /.*/

      - deployable:
          requires:
            - build
            - test_deploy_pypi
          filters:
            branches:
              only: master
            tags:
              only: /.*/

      - deploy_pypi:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

      - build_docs:
          filters:
            branches:
              ignore:
                - /tests?\/.*/
            tags:
              only: /.*/

      - deploy_docs_master:
          requires:
            - build_docs
            - test_deploy_pypi
          filters:
            branches:
              only: /master/
            tags:
              ignore: /.*/

      - deploy_docs_tag:
          requires:
            - deployable
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/

